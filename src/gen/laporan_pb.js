// source: laporan.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.laporan.MetaPaging', null, global);
goog.exportSymbol('proto.laporan.ReqAddLaporan', null, global);
goog.exportSymbol('proto.laporan.ReqFind', null, global);
goog.exportSymbol('proto.laporan.ReqId', null, global);
goog.exportSymbol('proto.laporan.ResLaporan', null, global);
goog.exportSymbol('proto.laporan.ResLaporanPaging', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.laporan.ResLaporan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.laporan.ResLaporan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.laporan.ResLaporan.displayName = 'proto.laporan.ResLaporan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.laporan.ReqFind = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.laporan.ReqFind, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.laporan.ReqFind.displayName = 'proto.laporan.ReqFind';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.laporan.MetaPaging = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.laporan.MetaPaging, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.laporan.MetaPaging.displayName = 'proto.laporan.MetaPaging';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.laporan.ResLaporanPaging = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.laporan.ResLaporanPaging.repeatedFields_, null);
};
goog.inherits(proto.laporan.ResLaporanPaging, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.laporan.ResLaporanPaging.displayName = 'proto.laporan.ResLaporanPaging';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.laporan.ReqAddLaporan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.laporan.ReqAddLaporan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.laporan.ReqAddLaporan.displayName = 'proto.laporan.ReqAddLaporan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.laporan.ReqId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.laporan.ReqId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.laporan.ReqId.displayName = 'proto.laporan.ReqId';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.laporan.ResLaporan.prototype.toObject = function(opt_includeInstance) {
  return proto.laporan.ResLaporan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.laporan.ResLaporan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.laporan.ResLaporan.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    diterima: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    createdby: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nama: jspb.Message.getFieldWithDefault(msg, 4, ""),
    alamat: jspb.Message.getFieldWithDefault(msg, 5, ""),
    nomorhp: jspb.Message.getFieldWithDefault(msg, 6, ""),
    lon: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    darurat: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    deskripsi: jspb.Message.getFieldWithDefault(msg, 10, ""),
    imageurl: jspb.Message.getFieldWithDefault(msg, 11, ""),
    fcmpelapor: jspb.Message.getFieldWithDefault(msg, 12, ""),
    waktukejadian: jspb.Message.getFieldWithDefault(msg, 13, ""),
    createdat: jspb.Message.getFieldWithDefault(msg, 14, ""),
    updatedat: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.laporan.ResLaporan}
 */
proto.laporan.ResLaporan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.laporan.ResLaporan;
  return proto.laporan.ResLaporan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.laporan.ResLaporan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.laporan.ResLaporan}
 */
proto.laporan.ResLaporan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDiterima(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedby(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNama(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlamat(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNomorhp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLon(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDarurat(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeskripsi(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageurl(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setFcmpelapor(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaktukejadian(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedat(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.laporan.ResLaporan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.laporan.ResLaporan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.laporan.ResLaporan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.laporan.ResLaporan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDiterima();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCreatedby();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNama();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAlamat();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNomorhp();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getDarurat();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getDeskripsi();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getImageurl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getFcmpelapor();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getWaktukejadian();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getCreatedat();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getUpdatedat();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.laporan.ResLaporan.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool diterima = 2;
 * @return {boolean}
 */
proto.laporan.ResLaporan.prototype.getDiterima = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setDiterima = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string createdBy = 3;
 * @return {string}
 */
proto.laporan.ResLaporan.prototype.getCreatedby = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setCreatedby = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string nama = 4;
 * @return {string}
 */
proto.laporan.ResLaporan.prototype.getNama = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setNama = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string alamat = 5;
 * @return {string}
 */
proto.laporan.ResLaporan.prototype.getAlamat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setAlamat = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string nomorHp = 6;
 * @return {string}
 */
proto.laporan.ResLaporan.prototype.getNomorhp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setNomorhp = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double lon = 7;
 * @return {number}
 */
proto.laporan.ResLaporan.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setLon = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double lat = 8;
 * @return {number}
 */
proto.laporan.ResLaporan.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional bool darurat = 9;
 * @return {boolean}
 */
proto.laporan.ResLaporan.prototype.getDarurat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setDarurat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string deskripsi = 10;
 * @return {string}
 */
proto.laporan.ResLaporan.prototype.getDeskripsi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setDeskripsi = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string imageUrl = 11;
 * @return {string}
 */
proto.laporan.ResLaporan.prototype.getImageurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setImageurl = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string fcmPelapor = 12;
 * @return {string}
 */
proto.laporan.ResLaporan.prototype.getFcmpelapor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setFcmpelapor = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string WaktuKejadian = 13;
 * @return {string}
 */
proto.laporan.ResLaporan.prototype.getWaktukejadian = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setWaktukejadian = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string createdAt = 14;
 * @return {string}
 */
proto.laporan.ResLaporan.prototype.getCreatedat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setCreatedat = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string updatedAt = 15;
 * @return {string}
 */
proto.laporan.ResLaporan.prototype.getUpdatedat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ResLaporan} returns this
 */
proto.laporan.ResLaporan.prototype.setUpdatedat = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.laporan.ReqFind.prototype.toObject = function(opt_includeInstance) {
  return proto.laporan.ReqFind.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.laporan.ReqFind} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.laporan.ReqFind.toObject = function(includeInstance, msg) {
  var f, obj = {
    darurat: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    page: jspb.Message.getFieldWithDefault(msg, 2, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.laporan.ReqFind}
 */
proto.laporan.ReqFind.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.laporan.ReqFind;
  return proto.laporan.ReqFind.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.laporan.ReqFind} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.laporan.ReqFind}
 */
proto.laporan.ReqFind.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDarurat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.laporan.ReqFind.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.laporan.ReqFind.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.laporan.ReqFind} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.laporan.ReqFind.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDarurat();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bool darurat = 1;
 * @return {boolean}
 */
proto.laporan.ReqFind.prototype.getDarurat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.laporan.ReqFind} returns this
 */
proto.laporan.ReqFind.prototype.setDarurat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 page = 2;
 * @return {number}
 */
proto.laporan.ReqFind.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.laporan.ReqFind} returns this
 */
proto.laporan.ReqFind.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.laporan.ReqFind.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.laporan.ReqFind} returns this
 */
proto.laporan.ReqFind.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.laporan.MetaPaging.prototype.toObject = function(opt_includeInstance) {
  return proto.laporan.MetaPaging.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.laporan.MetaPaging} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.laporan.MetaPaging.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalitems: jspb.Message.getFieldWithDefault(msg, 1, 0),
    itemcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    itemsperpage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalpages: jspb.Message.getFieldWithDefault(msg, 4, 0),
    currentpage: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.laporan.MetaPaging}
 */
proto.laporan.MetaPaging.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.laporan.MetaPaging;
  return proto.laporan.MetaPaging.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.laporan.MetaPaging} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.laporan.MetaPaging}
 */
proto.laporan.MetaPaging.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalitems(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItemcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItemsperpage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalpages(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentpage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.laporan.MetaPaging.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.laporan.MetaPaging.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.laporan.MetaPaging} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.laporan.MetaPaging.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalitems();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getItemcount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getItemsperpage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTotalpages();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCurrentpage();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 totalItems = 1;
 * @return {number}
 */
proto.laporan.MetaPaging.prototype.getTotalitems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.laporan.MetaPaging} returns this
 */
proto.laporan.MetaPaging.prototype.setTotalitems = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 itemCount = 2;
 * @return {number}
 */
proto.laporan.MetaPaging.prototype.getItemcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.laporan.MetaPaging} returns this
 */
proto.laporan.MetaPaging.prototype.setItemcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 itemsPerPage = 3;
 * @return {number}
 */
proto.laporan.MetaPaging.prototype.getItemsperpage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.laporan.MetaPaging} returns this
 */
proto.laporan.MetaPaging.prototype.setItemsperpage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 totalPages = 4;
 * @return {number}
 */
proto.laporan.MetaPaging.prototype.getTotalpages = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.laporan.MetaPaging} returns this
 */
proto.laporan.MetaPaging.prototype.setTotalpages = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 currentPage = 5;
 * @return {number}
 */
proto.laporan.MetaPaging.prototype.getCurrentpage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.laporan.MetaPaging} returns this
 */
proto.laporan.MetaPaging.prototype.setCurrentpage = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.laporan.ResLaporanPaging.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.laporan.ResLaporanPaging.prototype.toObject = function(opt_includeInstance) {
  return proto.laporan.ResLaporanPaging.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.laporan.ResLaporanPaging} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.laporan.ResLaporanPaging.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && proto.laporan.MetaPaging.toObject(includeInstance, f),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.laporan.ResLaporan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.laporan.ResLaporanPaging}
 */
proto.laporan.ResLaporanPaging.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.laporan.ResLaporanPaging;
  return proto.laporan.ResLaporanPaging.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.laporan.ResLaporanPaging} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.laporan.ResLaporanPaging}
 */
proto.laporan.ResLaporanPaging.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.laporan.MetaPaging;
      reader.readMessage(value,proto.laporan.MetaPaging.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new proto.laporan.ResLaporan;
      reader.readMessage(value,proto.laporan.ResLaporan.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.laporan.ResLaporanPaging.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.laporan.ResLaporanPaging.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.laporan.ResLaporanPaging} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.laporan.ResLaporanPaging.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.laporan.MetaPaging.serializeBinaryToWriter
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.laporan.ResLaporan.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetaPaging meta = 1;
 * @return {?proto.laporan.MetaPaging}
 */
proto.laporan.ResLaporanPaging.prototype.getMeta = function() {
  return /** @type{?proto.laporan.MetaPaging} */ (
    jspb.Message.getWrapperField(this, proto.laporan.MetaPaging, 1));
};


/**
 * @param {?proto.laporan.MetaPaging|undefined} value
 * @return {!proto.laporan.ResLaporanPaging} returns this
*/
proto.laporan.ResLaporanPaging.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.laporan.ResLaporanPaging} returns this
 */
proto.laporan.ResLaporanPaging.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.laporan.ResLaporanPaging.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ResLaporan items = 2;
 * @return {!Array<!proto.laporan.ResLaporan>}
 */
proto.laporan.ResLaporanPaging.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.laporan.ResLaporan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.laporan.ResLaporan, 2));
};


/**
 * @param {!Array<!proto.laporan.ResLaporan>} value
 * @return {!proto.laporan.ResLaporanPaging} returns this
*/
proto.laporan.ResLaporanPaging.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.laporan.ResLaporan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.laporan.ResLaporan}
 */
proto.laporan.ResLaporanPaging.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.laporan.ResLaporan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.laporan.ResLaporanPaging} returns this
 */
proto.laporan.ResLaporanPaging.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.laporan.ReqAddLaporan.prototype.toObject = function(opt_includeInstance) {
  return proto.laporan.ReqAddLaporan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.laporan.ReqAddLaporan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.laporan.ReqAddLaporan.toObject = function(includeInstance, msg) {
  var f, obj = {
    nama: jspb.Message.getFieldWithDefault(msg, 1, ""),
    alamat: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nomorhp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lon: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    darurat: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    deskripsi: jspb.Message.getFieldWithDefault(msg, 7, ""),
    imageurl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    fcmpelapor: jspb.Message.getFieldWithDefault(msg, 9, ""),
    waktukejadian: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.laporan.ReqAddLaporan}
 */
proto.laporan.ReqAddLaporan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.laporan.ReqAddLaporan;
  return proto.laporan.ReqAddLaporan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.laporan.ReqAddLaporan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.laporan.ReqAddLaporan}
 */
proto.laporan.ReqAddLaporan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNama(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlamat(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNomorhp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLon(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDarurat(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeskripsi(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageurl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setFcmpelapor(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaktukejadian(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.laporan.ReqAddLaporan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.laporan.ReqAddLaporan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.laporan.ReqAddLaporan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.laporan.ReqAddLaporan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNama();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAlamat();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNomorhp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getDarurat();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDeskripsi();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getImageurl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getFcmpelapor();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getWaktukejadian();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string nama = 1;
 * @return {string}
 */
proto.laporan.ReqAddLaporan.prototype.getNama = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ReqAddLaporan} returns this
 */
proto.laporan.ReqAddLaporan.prototype.setNama = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string alamat = 2;
 * @return {string}
 */
proto.laporan.ReqAddLaporan.prototype.getAlamat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ReqAddLaporan} returns this
 */
proto.laporan.ReqAddLaporan.prototype.setAlamat = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nomorHp = 3;
 * @return {string}
 */
proto.laporan.ReqAddLaporan.prototype.getNomorhp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ReqAddLaporan} returns this
 */
proto.laporan.ReqAddLaporan.prototype.setNomorhp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double lon = 4;
 * @return {number}
 */
proto.laporan.ReqAddLaporan.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.laporan.ReqAddLaporan} returns this
 */
proto.laporan.ReqAddLaporan.prototype.setLon = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double lat = 5;
 * @return {number}
 */
proto.laporan.ReqAddLaporan.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.laporan.ReqAddLaporan} returns this
 */
proto.laporan.ReqAddLaporan.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional bool darurat = 6;
 * @return {boolean}
 */
proto.laporan.ReqAddLaporan.prototype.getDarurat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.laporan.ReqAddLaporan} returns this
 */
proto.laporan.ReqAddLaporan.prototype.setDarurat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string deskripsi = 7;
 * @return {string}
 */
proto.laporan.ReqAddLaporan.prototype.getDeskripsi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ReqAddLaporan} returns this
 */
proto.laporan.ReqAddLaporan.prototype.setDeskripsi = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string imageUrl = 8;
 * @return {string}
 */
proto.laporan.ReqAddLaporan.prototype.getImageurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ReqAddLaporan} returns this
 */
proto.laporan.ReqAddLaporan.prototype.setImageurl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string fcmPelapor = 9;
 * @return {string}
 */
proto.laporan.ReqAddLaporan.prototype.getFcmpelapor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ReqAddLaporan} returns this
 */
proto.laporan.ReqAddLaporan.prototype.setFcmpelapor = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string WaktuKejadian = 10;
 * @return {string}
 */
proto.laporan.ReqAddLaporan.prototype.getWaktukejadian = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ReqAddLaporan} returns this
 */
proto.laporan.ReqAddLaporan.prototype.setWaktukejadian = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.laporan.ReqId.prototype.toObject = function(opt_includeInstance) {
  return proto.laporan.ReqId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.laporan.ReqId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.laporan.ReqId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.laporan.ReqId}
 */
proto.laporan.ReqId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.laporan.ReqId;
  return proto.laporan.ReqId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.laporan.ReqId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.laporan.ReqId}
 */
proto.laporan.ReqId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.laporan.ReqId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.laporan.ReqId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.laporan.ReqId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.laporan.ReqId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.laporan.ReqId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.laporan.ReqId} returns this
 */
proto.laporan.ReqId.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.laporan);
